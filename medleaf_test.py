# -*- coding: utf-8 -*-
"""medleaf_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18hsQhn873mcrlw9Y7-yn3LrJJKKt7pFu

# **Medical Leaf Classification**
This is notebook for medical leaf image classification. For "Tumbuhin" app.
<br>
This classification used TensorFlow-Lite Model Maker
<br>
<br>
for more detail about TFLite Model Maker, click link below:
<br>
https://www.tensorflow.org/lite/guide/model_maker
<br>
<br>
*NB: Please try this notebook on Google Colab*
<br>
<br>
### **1). Install TFLite Model Maker**
Run cell below to ensure your machine have installed tflite-model-maker library
"""

!pip install tflite-model-maker

"""### **2). Import Required Libraries**
Import tflite-model-maker below for image processing preparation
"""

import os

import numpy as np

import tensorflow as tf
assert tf.__version__.startswith('2')

from tflite_model_maker import model_spec
from tflite_model_maker import image_classifier
from tflite_model_maker.config import ExportFormat
from tflite_model_maker.config import QuantizationConfig
from tflite_model_maker.image_classifier import DataLoader

import matplotlib.pyplot as plt

"""### **3). Locate the Datasets**
Here, you must locate the datasets location/directory.
"""

image_path = "/content/drive/MyDrive/Datasets"

"""### **4). Load the Datasets**
Load datasets using DataLoader
"""

data = DataLoader.from_folder(image_path)

"""### **5). Distribute/split the Datasets**
Split the datasets into train-test-validation

Train 80% per class/labels

Test 10% per class/labels

Validation 10% per class/labels
"""

train_data, rest_data = data.split(0.8) # 80% for training
validation_data, test_data = rest_data.split(0.5) # 10% for testing, 10% for validation

"""### **6). Display Random Images**
Display random images from datasets before continue
"""

plt.figure(figsize=(15, 15))
for i, (image, label) in enumerate(
    data.gen_dataset().unbatch().take(25)):
  plt.subplot(5, 5, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(image.numpy(), cmap=plt.cm.gray)
  plt.xlabel(data.index_to_label[label.numpy()])

plt.show()

"""### **7). Use pre-trained model**
Here, we use EfficientNet Lite0 as a base model for image classification and build custom tflite model

More info, click here:
<br>
https://blog.tensorflow.org/2020/03/higher-accuracy-on-vision-models-with-efficientnet-lite.html
"""

efficientnet_model = model_spec.get("efficientnet_lite1")

"""### **8). Training and Creating**
Here, we begin train the entire datasets and also create custom model based on pre-trained model
"""

model = image_classifier.create(train_data,
                                epochs=10,
                                validation_data=validation_data,
                                model_spec=efficientnet_model)

"""### **9). Display Model Summary**"""

model.summary()

"""### **10). Evaluate the Model**
Evaluate the model using test data
"""

model.evaluate(test_data)

"""### **11). Display Random Predicted Images**
Display info about predicted image, we can see if the image was predicted correctly or not
"""

def get_label_color(predict_label, actual_label):
  if predict_label == actual_label:
    return "black"
  else:
    return "red"

plt.figure(figsize=(20, 20))
predicts = model.predict_top_k(test_data)
for i, (image, label) in enumerate(
    test_data.gen_dataset().unbatch().take(100)):
  ax = plt.subplot(10, 10, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(image.numpy(), cmap=plt.cm.gray)

  predict_label = predicts[i][0][0]
  color = get_label_color(predict_label,
                          test_data.index_to_label[label.numpy()])
  ax.xaxis.label.set_color(color)
  plt.xlabel("Predicted:\n{}".format(predict_label))

plt.show()

"""### **12). Deployment**
Export/deploy into TFLite Model File. Use for Android "Tumbuhin" app
"""

model.export(export_dir=".")

"""For exporting labels only"""

model.export(export_dir=".", export_format=ExportFormat.LABEL)

"""### **13). Evaluate The TFLite Model**
Evaluate the TFLite Model with test data (again)
"""

model.evaluate_tflite("model.tflite", test_data)

model.export(export_dir=".")