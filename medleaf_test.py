# -*- coding: utf-8 -*-
"""medleaf_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18hsQhn873mcrlw9Y7-yn3LrJJKKt7pFu
"""

pip install tflite-model-maker

import os

import numpy as np

import tensorflow as tf
assert tf.__version__.startswith('2')

from tflite_model_maker import model_spec
from tflite_model_maker import image_classifier
from tflite_model_maker.config import ExportFormat
from tflite_model_maker.config import QuantizationConfig
from tflite_model_maker.image_classifier import DataLoader

import matplotlib.pyplot as plt

image_path = "/content/drive/MyDrive/Datasets"

data = DataLoader.from_folder(image_path)

train_data, rest_data = data.split(0.8)
validation_data, test_data = rest_data.split(0.5)

plt.figure(figsize=(16, 16))
for i, (image, label) in enumerate(
    data.gen_dataset().unbatch().take(16)):
  plt.subplot(4, 4, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(image.numpy(), cmap=plt.cm.gray)
  plt.xlabel(data.index_to_label[label.numpy()])

plt.show()

model = image_classifier.create(train_data,
                                epochs=10,
                                validation_data=validation_data,
                                model_spec=model_spec.get("efficientnet_lite1"))

model.summary()

loss, accuracy = model.evaluate(test_data)

def get_label_color(predict_label, actual_label):
  if predict_label == actual_label:
    return "black"
  else:
    return "red"

plt.figure(figsize=(24, 24))
predicts = model.predict_top_k(test_data)
for i, (image, label) in enumerate(
    test_data.gen_dataset().unbatch().take(64)):
  ax = plt.subplot(8, 8, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(image.numpy(), cmap=plt.cm.gray)

  predict_label = predicts[i][0][0]
  color = get_label_color(predict_label,
                          test_data.index_to_label[label.numpy()])
  ax.xaxis.label.set_color(color)
  plt.xlabel("Predicted:\n{}".format(predict_label))

plt.show()

model.export(export_dir=".")

model.export(export_dir=".", export_format=ExportFormat.LABEL)

model.evaluate_tflite("model.tflite", test_data)

model.export(export_dir=".")